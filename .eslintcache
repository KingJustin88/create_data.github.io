[{"/Users/Hirata/Desktop/create_data/src/index.js":"1","/Users/Hirata/Desktop/create_data/src/App.js":"2","/Users/Hirata/Desktop/create_data/src/components/HomePage.js":"3","/Users/Hirata/Desktop/create_data/src/components/Form.js":"4","/Users/Hirata/Desktop/create_data/src/components/Uppercase.js":"5","/Users/Hirata/Desktop/create_data/src/components/UpperLowerCase.js":"6","/Users/Hirata/Desktop/create_data/src/components/Lowercase.js":"7","/Users/Hirata/Desktop/create_data/src/components/MixNumLetters.js":"8","/Users/Hirata/Desktop/create_data/src/components/UpperLowercase.js":"9","/Users/Hirata/Desktop/create_data/src/components/Numbers.js":"10","/Users/Hirata/Desktop/create_data/src/Context.js":"11"},{"size":259,"mtime":1677715136922,"results":"12","hashOfConfig":"13"},{"size":1220,"mtime":1677715118694,"results":"14","hashOfConfig":"13"},{"size":2743,"mtime":1704507766210,"results":"15","hashOfConfig":"13"},{"size":476,"mtime":1614126239424,"results":"16","hashOfConfig":"13"},{"size":4763,"mtime":1704588979448,"results":"17","hashOfConfig":"13"},{"size":527,"mtime":1608251149228,"results":"18","hashOfConfig":"19"},{"size":4971,"mtime":1677803271140,"results":"20","hashOfConfig":"13"},{"size":4716,"mtime":1704507678175,"results":"21","hashOfConfig":"13"},{"size":4817,"mtime":1677802675542,"results":"22","hashOfConfig":"13"},{"size":4929,"mtime":1677803883657,"results":"23","hashOfConfig":"13"},{"size":1237,"mtime":1612927873991,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1l0pzvj",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jj0mub",{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/Hirata/Desktop/create_data/src/index.js",[],["54","55"],"/Users/Hirata/Desktop/create_data/src/App.js",[],"/Users/Hirata/Desktop/create_data/src/components/HomePage.js",[],"/Users/Hirata/Desktop/create_data/src/components/Form.js",["56"],"import React from 'react' \n\nexport default (props) => {\n    const {\n        submit,\n        submitButtonText,\n        elements,\n    } = props;\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        submit();\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                {elements()}\n                <button className=\"button\" type=\"submit\">{submitButtonText}</button>\n            </form>\n            \n        </div>\n    )\n}\n",["57","58"],"/Users/Hirata/Desktop/create_data/src/components/Uppercase.js",["59","60","61"],"/Users/Hirata/Desktop/create_data/src/components/UpperLowerCase.js",[],"/Users/Hirata/Desktop/create_data/src/components/Lowercase.js",["62","63","64"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Form from './Form'\nimport arraysData from './data.json'\nimport './Arrays.css';\n\n\nexport default class Lowercase extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            userLowercaseLetterInput: '',\n            userArrayNumberInput: '',\n            listOfLowercaseLetters: [],\n            finalResults: []\n        }\n    }\n\n    submit = () => {\n        var lowercaseLetters = arraysData.arrays[2].lowercase.toString(',')\n        const { userLowercaseLetterInput, userArrayNumberInput, listOfLowercaseLetters, finalResults} = this.state;        \n        for(let i = 0; i < userArrayNumberInput; i++){\n                for(let i = 0; i < userLowercaseLetterInput; i++) {\n                // math.random can multiply for how big the number you want\n                // you can later add userinput for how big the amount of arrays you want\n                var randomLetterIndex = Math.floor(Math.random() * 26);\n                var lowercaseLetter = lowercaseLetters[randomLetterIndex];                          \n                listOfLowercaseLetters.push(lowercaseLetter)\n                console.log(lowercaseLetter)            \n                }\n\n                const comma = ','\n                const wholeArrayOfNumbers = `<div>\n                                            <p>[${listOfLowercaseLetters}]${comma}</p>\n                                        </div>`\n                finalResults.push(wholeArrayOfNumbers)                          \n                // console.log(finalResults)\n                // use map to multiply how many array you want at the end of innerHTML\n                listOfLowercaseLetters.concat(listOfLowercaseLetters.splice(0,userLowercaseLetterInput))\n                document.getElementById('results').innerHTML = finalResults.join(\" \")\n                \n                \n                \n        }\n        this.userLowercaseLetterInput.value = '';\n        this.userArrayNumberInput.value = '';\n        this.state.finalResults = [];  \n        // console.log(uppercaseLetters)      \n    }\n\n    change = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;    \n        this.setState(() => {\n        return {\n            [name]: value\n        };\n        });\n    }\n\n    render() {\n\n        const { userLowercaseLetterInput, userArrayNumberInput} = this.state;\n\n        return (\n            <div className=\"arraysBackground\">                        \n                <div className=\"arrays-container\">              \n                    <Link className=\"arrays-button\" to={`/`}>Home</Link>                                                         \n                    <h1 className=\"arrays-background\"></h1>                    \n                        <h2 id=\"results\"></h2>                                        \n                    <div className=\"array-input\">\n                        <h1 className=\"h1\">How would you like your Lowercase Letters arranged?</h1>\n                        <Form\n                            className=\"formsPosition\"\n                            submit={this.submit}\n                            submitButtonText=\"Get your letters!\"\n                            elements={() => (\n                                <>\n                                    <input\n                                        id=\"userNumberInput\"\n                                        className=\"userNumberInput\" \n                                        name=\"userLowercaseLetterInput\" \n                                        type=\"number\"\n                                        placeholder=\"How many letters in an array?\"                                    \n                                        value={userLowercaseLetterInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userLowercaseLetterInput = el)}\n                                    />\n                                    <input\n                                        id=\"userArrayNumberInput\" \n                                        name=\"userArrayNumberInput\"\n                                        className=\"userArrayNumberInput\" \n                                        type=\"number\" \n                                        placeholder=\"How many arrays?\"                                   \n                                        value={userArrayNumberInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userArrayNumberInput = el)}\n                                    />\n                                </>\n                            )}\n                        /> \n                        \n                                                     \n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}","/Users/Hirata/Desktop/create_data/src/components/MixNumLetters.js",["65","66","67"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Form from './Form'\nimport arraysData from './data.json'\nimport './Arrays.css';\n\nexport default class MixNumLetters extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            userMixNumLetterInput: '',\n            userArrayNumberInput: '',\n            listOfMixNumLetters: [],\n            finalResults: []\n        }\n    }\n\n    submit = () => {\n        var mixNumLetters = arraysData.arrays[4].mixNumLetters.join('')\n        const { userMixNumLetterInput, userArrayNumberInput, listOfMixNumLetters, finalResults} = this.state;        \n        for(let i = 0; i < userArrayNumberInput; i++){\n                for(let i = 0; i < userMixNumLetterInput; i++) {\n                // math.random can multiply for how big the number you want\n                // you can later add userinput for how big the amount of arrays you want\n                var randomMixNumLetterIndex = Math.floor(Math.random() * 62);\n                var mixNumLetter = mixNumLetters[randomMixNumLetterIndex];                          \n                listOfMixNumLetters.push(mixNumLetter)           \n                }\n\n                const comma = ','\n                const wholeArrayOfNumbers = `<div>\n                                            <p>[${listOfMixNumLetters}]${comma}</p>\n                                        </div>`\n                finalResults.push(wholeArrayOfNumbers)                          \n                // console.log(finalResults)\n                // use map to multiply how many array you want at the end of innerHTML\n                listOfMixNumLetters.concat(listOfMixNumLetters.splice(0,userMixNumLetterInput))\n                document.getElementById('results').innerHTML = finalResults.join(\"\")\n                \n                \n                \n        }\n        this.userMixNumLetterInput.value = '';\n        this.userArrayNumberInput.value = '';\n        this.state.finalResults = [];  \n        // console.log(uppercaseLetters)      \n    }\n\n    change = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;    \n        this.setState(() => {\n        return {\n            [name]: value\n        };\n        });\n    }\n\n    render() {\n\n        const { userMixNumLetterInput, userArrayNumberInput} = this.state;\n\n        return (\n            <div className=\"arraysBackground\">\n                <div className=\"arrays-container\">\n                    <Link className=\"arrays-button\" to={`/`}>Home</Link>                \n                    <h1 className=\"arrays-background\"></h1> \n                        <h2 id=\"results\"></h2>\n                    <div className=\"array-input\">\n                        <h1 className=\"h1\">How would you like your Numbers and Letters arranged?</h1>                         \n                        <Form\n                            submit={this.submit}\n                            submitButtonText=\"Get your numbers and letters!\"\n                            elements={() => (\n                                <React.Fragment>\n                                    <input\n                                        id=\"userNumberInput\"\n                                        className=\"userNumberInput\" \n                                        name=\"userMixNumLetterInput\" \n                                        type=\"number\"\n                                        placeholder=\"How many numbers and letters in an array?\"                                    \n                                        value={userMixNumLetterInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userMixNumLetterInput = el)}\n                                    />\n                                    <input\n                                        id=\"userArrayNumberInput\" \n                                        name=\"userArrayNumberInput\"\n                                        className=\"userArrayNumberInput\" \n                                        type=\"number\" \n                                        placeholder=\"How many arrays?\"                                   \n                                        value={userArrayNumberInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userArrayNumberInput = el)}\n                                    />\n                                </React.Fragment>\n                            )}\n                        />                            \n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}","/Users/Hirata/Desktop/create_data/src/components/UpperLowercase.js",["68","69","70"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Form from './Form'\nimport arraysData from './data.json'\nimport './Arrays.css';\n\nexport default class UpperLowercase extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            userUpperLowercaseLetterInput: '',\n            userArrayNumberInput: '',\n            listOfUpperLowercaseLetters: [],\n            finalResults: []\n        }\n    }\n\n    submit = () => {\n        var upperlowercaseLetters = arraysData.arrays[3].upperLowercase.join('')\n        const { userUpperLowercaseLetterInput, userArrayNumberInput, listOfUpperLowercaseLetters, finalResults} = this.state;        \n        for(let i = 0; i < userArrayNumberInput; i++){\n                for(let i = 0; i < userUpperLowercaseLetterInput; i++) {\n                // math.random can multiply for how big the number you want\n                // you can later add userinput for how big the amount of arrays you want\n                var randomLetterIndex = Math.floor(Math.random() * 52);\n                var upperlowercaseLetter = upperlowercaseLetters[randomLetterIndex];                          \n                listOfUpperLowercaseLetters.push(upperlowercaseLetter)           \n                }\n\n                const comma = ','\n                const wholeArrayOfNumbers = `<div>\n                                            <p>[${listOfUpperLowercaseLetters}]${comma}</p>\n                                        </div>`\n                finalResults.push(wholeArrayOfNumbers)                          \n                // console.log(finalResults)\n                // use map to multiply how many array you want at the end of innerHTML\n                listOfUpperLowercaseLetters.concat(listOfUpperLowercaseLetters.splice(0,userUpperLowercaseLetterInput))\n                document.getElementById('results').innerHTML = finalResults.join(\"\")\n                \n                \n                \n        }\n        this.userUpperLowercaseLetterInput.value = '';\n        this.userArrayNumberInput.value = '';\n        this.state.finalResults = [];  \n        // console.log(uppercaseLetters)      \n    }\n\n    change = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;    \n        this.setState(() => {\n        return {\n            [name]: value\n        };\n        });\n    }\n\n    render() {\n\n        const { userUpperLowercaseLetterInput, userArrayNumberInput} = this.state;\n\n        return (\n            <div className=\"arraysBackground\">\n                <div className=\"arrays-container\">\n                    <Link className=\"arrays-button\" to={`/`}>Home</Link>                \n                    <h1 className=\"arrays-background\"></h1> \n                        <h2 id=\"results\"></h2>\n                    <div className=\"array-input\">\n                    <h1 className=\"h1\">How would you like your Upper and Lowercase Letters arranged?</h1>    \n                        <Form\n                            submit={this.submit}\n                            submitButtonText=\"Get your letters!\"\n                            elements={() => (\n                                <React.Fragment>\n                                    <input\n                                        id=\"userNumberInput\"\n                                        className=\"userNumberInput\" \n                                        name=\"userUpperLowercaseLetterInput\" \n                                        type=\"number\"\n                                        placeholder=\"How many letters in an array?\"                                    \n                                        value={userUpperLowercaseLetterInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userUpperLowercaseLetterInput = el)}\n                                    />\n                                    <input\n                                        id=\"userArrayNumberInput\" \n                                        name=\"userArrayNumberInput\"\n                                        className=\"userArrayNumberInput\" \n                                        type=\"number\" \n                                        placeholder=\"How many arrays?\"                                   \n                                        value={userArrayNumberInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userArrayNumberInput = el)}\n                                    />\n                                </React.Fragment>\n                            )}\n                        />                            \n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}","/Users/Hirata/Desktop/create_data/src/components/Numbers.js",["71","72","73"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Form from './Form'\n// import arraysData from './data.json'\nimport './Arrays.css';\n\n// var numbers = arraysData.arrays[0].numbers.toString(', ')\n// console.log(numbers[0])\n\n\nexport default class Numbers extends Component {\n\n    constructor(props) {\n        \n        super(props);\n        this.state = {\n            userNumberInput: '',\n            userArrayNumberInput: '',\n            listOfNumbers: [],\n            finalResults: []          \n        }        \n    }    \n\n    submit = () => {\n        const { userNumberInput, userArrayNumberInput, listOfNumbers, finalResults} = this.state;        \n        // const numbers = { userNumberInput, userArrayNumberInput, listOfNumbers, finalResults};\n        // console.log(numbers)        \n        for(let i = 0; i < userArrayNumberInput; i++){\n                for(let i = 0; i < userNumberInput; i++) {\n                // math.random can multiply for how big the number you want\n                // you can later add userinput for how big the number you want            \n                const randomNumber = Math.ceil(Math.random() * 100);\n                listOfNumbers.push(randomNumber)\n                console.log(listOfNumbers)                \n                }\n                const comma = ','\n                // use .join('') after listOfNumbers to get rid of commas\n                const wholeArrayOfNumbers = `<div>\n                                            <p>[${listOfNumbers}]${comma}</p>\n                                        </div>`\n                finalResults.push(wholeArrayOfNumbers)                          \n                // console.log(finalResults)\n                // use map to multiply how many array you want at the end of innerHTML\n                listOfNumbers.concat(listOfNumbers.splice(0,userNumberInput))\n                document.getElementById('results').innerHTML = finalResults.join(\" \")\n                \n                \n                \n        }\n        this.userNumberInput.value = '';\n        this.userArrayNumberInput.value = '';\n        this.state.finalResults = [];        \n    }\n\n    change = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;    \n        this.setState(() => {\n        return {\n            [name]: value\n        };\n        });\n    }\n\n    render() {\n        const {userNumberInput, userArrayNumberInput} = this.state\n\n        return (\n            <div className=\"arraysBackground\">\n                <div className=\"arrays-container\">\n                    <Link className=\"arrays-button\" to={`/`}>Home</Link>                \n                    <h1 className=\"arrays-background\"></h1> \n                        <h2 id=\"results\"></h2>\n                    <div className=\"array-input\">                                       \n                        <h1 className=\"h1\">How would you like your Numbers arranged?</h1>\n                        <Form\n                            submit={this.submit}\n                            submitButtonText=\"Get your numbers!\"\n                            elements={() => (\n                                \n                                <React.Fragment>\n                                    \n                                    <input\n                                        id=\"userNumberInput\"\n                                        className=\"userNumberInput\" \n                                        name=\"userNumberInput\" \n                                        type=\"number\"\n                                        placeholder=\"How many numbers in an array?\"                                    \n                                        value={userNumberInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userNumberInput = el)}\n                                    />\n                                    <input\n                                        id=\"userArrayNumberInput\" \n                                        name=\"userArrayNumberInput\"\n                                        className=\"userArrayNumberInput\" \n                                        type=\"number\" \n                                        placeholder=\"How many arrays?\"                                   \n                                        value={userArrayNumberInput}\n                                        onChange={this.change}\n                                        ref={(el) => (this.userArrayNumberInput = el)}\n                                    />\n                                </React.Fragment>\n                                \n                            )}\n                            \n                        />                                                    \n                    </div>\n                </div>\n            </div>\n            \n        )\n        \n    }    \n}\n\n\n","/Users/Hirata/Desktop/create_data/src/Context.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":3,"column":1,"nodeType":"80","endLine":24,"endColumn":2},{"ruleId":"74","replacedBy":"81"},{"ruleId":"76","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":52,"column":9,"nodeType":"85","endLine":52,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":74,"column":21,"nodeType":"88","endLine":74,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":75,"column":25,"nodeType":"88","endLine":75,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":49,"column":9,"nodeType":"85","endLine":49,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":71,"column":21,"nodeType":"88","endLine":71,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":72,"column":25,"nodeType":"88","endLine":72,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":47,"column":9,"nodeType":"85","endLine":47,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":69,"column":21,"nodeType":"88","endLine":69,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":70,"column":25,"nodeType":"88","endLine":70,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":47,"column":9,"nodeType":"85","endLine":47,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":69,"column":21,"nodeType":"88","endLine":69,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":70,"column":25,"nodeType":"88","endLine":70,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":52,"column":9,"nodeType":"85","endLine":52,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":72,"column":21,"nodeType":"88","endLine":72,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":73,"column":25,"nodeType":"88","endLine":73,"endColumn":42},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["89"],["90"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]